#include "keys.h"

namespace MCR
{
	Keys TranslateKey(SDL_Scancode sdlScancode)
	{
		switch (sdlScancode)
		{
		case SDL_SCANCODE_LSHIFT:
			return Keys::LeftShift;
		case SDL_SCANCODE_RSHIFT:
			return Keys::RightShift;
		case SDL_SCANCODE_LCTRL:
			return Keys::LeftControl;
		case SDL_SCANCODE_RCTRL:
			return Keys::RightControl;
		case SDL_SCANCODE_LALT:
			return Keys::LeftAlt;
		case SDL_SCANCODE_RALT:
			return Keys::RightAlt;
		case SDL_SCANCODE_ESCAPE:
			return Keys::Escape;
		case SDL_SCANCODE_SPACE:
			return Keys::Space;
		case SDL_SCANCODE_LEFT:
			return Keys::LeftArrow;
		case SDL_SCANCODE_UP:
			return Keys::UpArrow;
		case SDL_SCANCODE_RIGHT:
			return Keys::RightArrow;
		case SDL_SCANCODE_DOWN:
			return Keys::DownArrow;
		case SDL_SCANCODE_0:
			return Keys::D0;
		case SDL_SCANCODE_1:
			return Keys::D1;
		case SDL_SCANCODE_2:
			return Keys::D2;
		case SDL_SCANCODE_3:
			return Keys::D3;
		case SDL_SCANCODE_4:
			return Keys::D4;
		case SDL_SCANCODE_5:
			return Keys::D5;
		case SDL_SCANCODE_6:
			return Keys::D6;
		case SDL_SCANCODE_7:
			return Keys::D7;
		case SDL_SCANCODE_8:
			return Keys::D8;
		case SDL_SCANCODE_9:
			return Keys::D9;
		case SDL_SCANCODE_A:
			return Keys::A;
		case SDL_SCANCODE_B:
			return Keys::B;
		case SDL_SCANCODE_C:
			return Keys::C;
		case SDL_SCANCODE_D:
			return Keys::D;
		case SDL_SCANCODE_E:
			return Keys::E;
		case SDL_SCANCODE_F:
			return Keys::F;
		case SDL_SCANCODE_G:
			return Keys::G;
		case SDL_SCANCODE_H:
			return Keys::H;
		case SDL_SCANCODE_I:
			return Keys::I;
		case SDL_SCANCODE_J:
			return Keys::J;
		case SDL_SCANCODE_K:
			return Keys::K;
		case SDL_SCANCODE_L:
			return Keys::L;
		case SDL_SCANCODE_M:
			return Keys::M;
		case SDL_SCANCODE_N:
			return Keys::N;
		case SDL_SCANCODE_O:
			return Keys::O;
		case SDL_SCANCODE_P:
			return Keys::P;
		case SDL_SCANCODE_Q:
			return Keys::Q;
		case SDL_SCANCODE_R:
			return Keys::R;
		case SDL_SCANCODE_S:
			return Keys::S;
		case SDL_SCANCODE_T:
			return Keys::T;
		case SDL_SCANCODE_U:
			return Keys::U;
		case SDL_SCANCODE_V:
			return Keys::V;
		case SDL_SCANCODE_W:
			return Keys::W;
		case SDL_SCANCODE_X:
			return Keys::X;
		case SDL_SCANCODE_Y:
			return Keys::Y;
		case SDL_SCANCODE_Z:
			return Keys::Z;
		case SDL_SCANCODE_F1:
			return Keys::F1;
		case SDL_SCANCODE_F2:
			return Keys::F2;
		case SDL_SCANCODE_F3:
			return Keys::F3;
		case SDL_SCANCODE_F4:
			return Keys::F4;
		case SDL_SCANCODE_F5:
			return Keys::F5;
		case SDL_SCANCODE_F6:
			return Keys::F6;
		case SDL_SCANCODE_F7:
			return Keys::F7;
		case SDL_SCANCODE_F8:
			return Keys::F8;
		case SDL_SCANCODE_F9:
			return Keys::F9;
		case SDL_SCANCODE_F10:
			return Keys::F10;
		case SDL_SCANCODE_F11:
			return Keys::F11;
		case SDL_SCANCODE_F12:
			return Keys::F12;
		case SDL_SCANCODE_F13:
			return Keys::F13;
		case SDL_SCANCODE_F14:
			return Keys::F14;
		case SDL_SCANCODE_F15:
			return Keys::F15;
		case SDL_SCANCODE_F16:
			return Keys::F16;
		case SDL_SCANCODE_F17:
			return Keys::F17;
		case SDL_SCANCODE_F18:
			return Keys::F18;
		case SDL_SCANCODE_F19:
			return Keys::F19;
		case SDL_SCANCODE_F20:
			return Keys::F20;
		case SDL_SCANCODE_F21:
			return Keys::F21;
		case SDL_SCANCODE_F22:
			return Keys::F22;
		case SDL_SCANCODE_F23:
			return Keys::F23;
		case SDL_SCANCODE_F24:
			return Keys::F24;
		default:
			return Keys::Unknown;
		}
	}
	
	
}
