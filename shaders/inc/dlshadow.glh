#ifndef DLSHADOW_H
#define DLSHADOW_H

#ifndef DLS_SET_INDEX
#error "DLS_SET_INDEX not set before including dlshadow.glh"
#endif

const int numCascades = 3;
//layout(constant_id=2) const bool usePCF = false;

layout(set=DLS_SET_INDEX, binding=0) uniform sampler2DArrayShadow shadowMap;

layout(set=DLS_SET_INDEX, binding=1, std140) uniform ShadowInfoUB
{
	mat4 lightMatrices[numCascades];
	float sliceEndDepths[numCascades];
} shadow;

int getCascadeIndex(vec3 pos)
{
	vec4 postProjCoord = renderSettings.viewProj * vec4(pos, 1.0);
	float depth = postProjCoord.z / postProjCoord.w;
	
	for (int i = 0; i < numCascades; i++)
	{
		if (depth < shadow.sliceEndDepths[i])
			return i;
	}
	
	return -1;
}

float sampleShadowmapPcf(vec3 coord, float compare)
{
	const int pcfSamples = 3;
	const int SAMPLES_START = pcfSamples / 2;
	
	float blur = 0.0;
	
	for (int x = -SAMPLES_START; x <= SAMPLES_START; x++)
	{
		for (int y = -SAMPLES_START; y <= SAMPLES_START; y++)
		{
			vec2 offset = vec2(x, y) / vec2(textureSize(shadowMap, 0));
			
			blur += texture(shadowMap, vec4(coord + vec3(offset, 0), compare));
		}
	}
	
	return blur / (pcfSamples * pcfSamples);
}

float getShadowFactor(vec3 worldPosition)
{
	int cascade = getCascadeIndex(worldPosition);
	if (cascade == -1)
		return 1.0;
	
	vec4 coords4 = shadow.lightMatrices[cascade] * vec4(worldPosition, 1.0);
	vec3 coords = coords4.xyz / coords4.w;
	vec3 sampleCoords = vec3(coords.xy / 2.0 + vec2(0.5), cascade);
	
	//if (usePCF)
		//return sampleShadowmapPcf(sampleCoords, coords.z);
	//return sampleVarianceMap(sampleShadowmap(sampleCoords, vec2(0.0)), compare);
	
	return texture(shadowMap, vec4(sampleCoords, coords.z));
	//return sampleShadowmap(sampleCoords, vec2(0.0)) < coords.z ? 0.0 : 1.0;
}

#endif
