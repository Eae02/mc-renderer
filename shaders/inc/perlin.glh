#ifndef PERLIN_H
#define PERLIN_H

const vec3 gradients[] = vec3[]
(
	vec3(1,1,0),
	vec3(-1,1,0),
	vec3(1,-1,0),
	vec3(-1,-1,0),
	vec3(1,0,1),
	vec3(-1,0,1),
	vec3(1,0,-1),
	vec3(-1,0,-1),
	vec3(0,1,1),
	vec3(0,-1,1),
	vec3(0,1,-1),
	vec3(0,-1,-1),
	vec3(1,1,0),
	vec3(0,-1,1),
	vec3(-1,1,0),
	vec3(0,-1,-1)
);

float grad(uint hash, vec3 fractPos)
{
	return dot(gradients[hash % gradients.length()], fractPos);
}

const uint[256] perm = uint[] ( 151,160,137,91,90,15,
	131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
	190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
	88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
	77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
	102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
	135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
	5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
	223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
	129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
	251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
	49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
	138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180
);

uint getPerm(uint i)
{
	return perm[(i % perm.length() + perm.length()) % perm.length()];
}

float perlin(vec3 pos)
{
	ivec3 posI = ivec3(floor(pos));
	vec3 posF = pos - vec3(posI);
	
	vec3 interpol = posF * posF * posF * (posF * (posF * vec3(6) - vec3(15)) + vec3(10));
	
	uint aaa = getPerm(getPerm(getPerm(posI.x + 0) + posI.y + 0) + posI.z + 0);
	uint aba = getPerm(getPerm(getPerm(posI.x + 0) + posI.y + 1) + posI.z + 0);
	uint aab = getPerm(getPerm(getPerm(posI.x + 0) + posI.y + 0) + posI.z + 1);
	uint abb = getPerm(getPerm(getPerm(posI.x + 0) + posI.y + 1) + posI.z + 1);
	uint baa = getPerm(getPerm(getPerm(posI.x + 1) + posI.y + 0) + posI.z + 0);
	uint bba = getPerm(getPerm(getPerm(posI.x + 1) + posI.y + 1) + posI.z + 0);
	uint bab = getPerm(getPerm(getPerm(posI.x + 1) + posI.y + 0) + posI.z + 1);
	uint bbb = getPerm(getPerm(getPerm(posI.x + 1) + posI.y + 1) + posI.z + 1);
	
	float x1, x2, y1, y2;
	x1 = mix(grad(aaa, posF), grad(baa, vec3(posF.x - 1, posF.y, posF.z)), interpol.x);
	x2 = mix(grad(aba, vec3(posF.x, posF.y - 1, posF.z)), grad(bba, vec3(posF.x - 1, posF.y - 1, posF.z)), interpol.x);
	y1 = mix(x1, x2, interpol.y);
	x1 = mix(grad(aab, vec3(posF.x, posF.y, posF.z - 1)), grad(bab, vec3(posF.x - 1, posF.y, posF.z - 1)), interpol.x);
	x2 = mix(grad(abb, vec3(posF.x, posF.y - 1, posF.z - 1)), grad(bbb, vec3(posF.x - 1, posF.y - 1, posF.z - 1)), interpol.x);
	y2 = mix(x1, x2, interpol.y);
	
	return mix(y1, y2, interpol.z);
}

float perlinOctRidge(vec3 pos, int octaves, float gain, float lacunarity)
{
	float value = 0.0;
	float amplitude = 0.5;
	
	for (int i = 0; i < octaves; i++)
	{
		value += amplitude * abs(perlin(pos));
		pos *= gain;
		amplitude *= lacunarity;
	}
	
	return value;
}

#endif
